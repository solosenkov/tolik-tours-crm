// ========================
// üóÉÔ∏è Database Operations
// ========================

let allBookings = [];
let filteredBookings = [];

// ========================
// Data Management
// ========================

function setupFirestoreListeners() {
    const db = window.TolikCRM.db;
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ bookings
    db.collection('bookings')
        .orderBy('createdAt', 'desc')
        .onSnapshot((querySnapshot) => {
        allBookings = [];
        
        querySnapshot.forEach((doc) => {
            const data = doc.data();
            allBookings.push({
                id: doc.id,
                ...data,
                createdAt: data.createdAt?.toDate() || new Date()
            });
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        applyFilters();
        if (window.TolikCRM.ui) {
            window.TolikCRM.ui.updateDashboardStats(allBookings);
            window.TolikCRM.ui.updateExcursionsOverview(allBookings);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (window.TolikCRM.finance && document.getElementById('financesPage') && 
            document.getElementById('financesPage').classList.contains('active')) {
            const financialData = window.TolikCRM.finance.calculateFinancialReport(allBookings);
            window.TolikCRM.finance.updateFinancialStats(financialData.summary);
            window.TolikCRM.finance.renderFinancialTable(Object.values(financialData.byExcursion));
        }
        
    }, (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã');
    });
}

async function addBooking(bookingData) {
    const db = window.TolikCRM.db;
    const firebase = window.TolikCRM.firebase;
    
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ Firestore
        const docRef = await db.collection('bookings').add({
            ...bookingData,
            createdAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        return docRef;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        throw error;
    }
}

async function deleteBooking(bookingId) {
    const db = window.TolikCRM.db;
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const booking = allBookings.find(b => b.id === bookingId);
    
    if (!booking) {
        showError('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmMessage = `‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –£–î–ê–õ–ò–¢–¨ —ç—Ç—É –∑–∞—è–≤–∫—É?

üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:
üë§ –§–ò–û: ${booking.fullName}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${booking.contact}
üè® –û—Ç–µ–ª—å: ${booking.hotel}
üó∫Ô∏è –≠–∫—Å–∫—É—Ä—Å–∏—è: ${booking.excursionName}
üìÖ –î–∞—Ç–∞: ${formatDate(new Date(booking.date))}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${booking.participants} —á–µ–ª.

‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.`;
    
    if (!confirm(confirmMessage)) {
        return;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const doubleConfirm = confirm('üîí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n\n–í—ã –¢–û–ß–ù–û —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!');
    
    if (!doubleConfirm) {
        return;
    }
    
    try {
        showLoading(true);
        await db.collection('bookings').doc(bookingId).delete();
        showSuccess(`–ó–∞—è–≤–∫–∞ "${booking.fullName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!`);
        showLoading(false);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        showLoading(false);
    }
}

// ========================
// Filtering
// ========================

function applyFilters() {
    const filterExcursionSelect = document.getElementById('filterExcursion');
    const filterDateInput = document.getElementById('filterDate');
    
    const excursionFilter = filterExcursionSelect?.value || '';
    const dateFilter = filterDateInput?.value || '';
    
    filteredBookings = allBookings.filter(booking => {
        // –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —ç–∫—Å–∫—É—Ä—Å–∏–∏ (excursionName)
        const matchesExcursion = !excursionFilter || booking.excursionName === excursionFilter;
        const matchesDate = !dateFilter || booking.date === dateFilter;
        
        return matchesExcursion && matchesDate;
    });
    
    if (window.TolikCRM.ui) {
        window.TolikCRM.ui.renderBookingsTable(filteredBookings);
    }
}

function clearFilters() {
    const filterExcursionSelect = document.getElementById('filterExcursion');
    const filterDateInput = document.getElementById('filterDate');
    
    if (filterExcursionSelect) filterExcursionSelect.value = '';
    if (filterDateInput) filterDateInput.value = '';
    
    applyFilters();
}

// ========================
// Data Grouping
// ========================

function groupBookingsByDate(bookings) {
    return bookings.reduce((groups, booking) => {
        const date = booking.date;
        if (!groups[date]) {
            groups[date] = [];
        }
        groups[date].push(booking);
        return groups;
    }, {});
}

function groupBookingsByExcursionAndDate(bookings) {
    return bookings.reduce((groups, booking) => {
        const key = `${booking.excursionName}|${booking.date}`;
        if (!groups[key]) {
            groups[key] = [];
        }
        groups[key].push(booking);
        return groups;
    }, {});
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —ç–∫—Å–∫—É—Ä—Å–∏—è–º (excursion -> dates -> participants)
function groupBookingsByExcursions(bookings) {
    return bookings.reduce((excursions, booking) => {
        const excursionName = booking.excursionName;
        const date = booking.date;
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫—Å–∫—É—Ä—Å–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!excursions[excursionName]) {
            excursions[excursionName] = {};
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!excursions[excursionName][date]) {
            excursions[excursionName][date] = [];
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –¥–∞—Ç–µ
        excursions[excursionName][date].push(booking);
        
        return excursions;
    }, {});
}

// ========================
// Utility Functions
// ========================

function formatDate(date) {
    return new Intl.DateTimeFormat('ru-RU', {
        day: '2-digit',
        month: '2-digit', 
        year: 'numeric'
    }).format(date);
}

function getPaymentStatusText(status) {
    const statuses = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'partial': '–ß–∞—Å—Ç–∏—á–Ω–æ',
        'paid': '–û–ø–ª–∞—á–µ–Ω–æ'
    };
    return statuses[status] || status;
}

function showLoading(show) {
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        loadingOverlay.style.display = show ? 'flex' : 'none';
    }
}

function showError(message) {
    let errorElement = document.getElementById('errorMessage');
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.id = 'errorMessage';
        errorElement.className = 'error-message';
        document.querySelector('.container').insertBefore(errorElement, document.querySelector('.container').firstChild);
    }
    
    errorElement.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${message}`;
    errorElement.style.display = 'block';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        errorElement.style.display = 'none';
    }, 5000);
}

function showSuccess(message) {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
    let successElement = document.getElementById('successMessage');
    if (!successElement) {
        successElement = document.createElement('div');
        successElement.id = 'successMessage';
        successElement.className = 'success-message';
        document.querySelector('.container').insertBefore(successElement, document.querySelector('.container').firstChild);
    }
    
    successElement.innerHTML = `<i class="fas fa-check-circle"></i> ${message}`;
    successElement.style.display = 'block';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        successElement.style.display = 'none';
    }, 3000);
}

// ========================
// Data Getters
// ========================

function getAllBookings() {
    return allBookings;
}

function getFilteredBookings() {
    return filteredBookings;
}

// ========================
// Export to global namespace
// ========================

window.TolikCRM = window.TolikCRM || {};
window.TolikCRM.database = {
    setupFirestoreListeners,
    addBooking,
    deleteBooking,
    applyFilters,
    clearFilters,
    groupBookingsByDate,
    groupBookingsByExcursionAndDate,
    groupBookingsByExcursions,
    formatDate,
    getPaymentStatusText,
    showLoading,
    showError,
    showSuccess,
    getAllBookings,
    getFilteredBookings
};

// Make deleteBooking globally available for HTML onclick
window.deleteBooking = deleteBooking;