// ========================
// üìä Export Functions (PDF & Excel)
// ========================

// ========================
// PDF Export
// ========================

function exportToPDF() {
    const filteredBookings = window.TolikCRM.database.getFilteredBookings();
    
    if (filteredBookings.length === 0) {
        window.TolikCRM.database.showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.');
        return;
    }
    
    try {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        doc.setFontSize(20);
        doc.setTextColor(37, 99, 235);
        doc.text('Tolik Tours - Booking List', 20, 20);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —ç–∫—Å–ø–æ—Ä—Ç–µ
        doc.setFontSize(12);
        doc.setTextColor(100, 116, 139);
        const exportDate = new Date().toLocaleDateString('en-US');
        const exportTime = new Date().toLocaleTimeString('en-US');
        doc.text(`Export created: ${exportDate} at ${exportTime}`, 20, 30);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ —ç–∫—Å–∫—É—Ä—Å–∏—è–º –∏ –¥–∞—Ç–∞–º
        const groupedBookings = groupBookingsByExcursionAndDate(filteredBookings);
        
        let yPosition = 50;
        
        Object.entries(groupedBookings).forEach(([key, bookings]) => {
            const [excursionName, date] = key.split('|');
            const totalParticipants = bookings.reduce((sum, b) => sum + b.participants, 0);
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏
            doc.setFontSize(16);
            doc.setTextColor(37, 99, 235);
            doc.text(`${excursionName}`, 20, yPosition);
            
            doc.setFontSize(12);
            doc.setTextColor(100, 116, 139);
            doc.text(`Date: ${formatDateForPDF(new Date(date))} | Total: ${totalParticipants} people`, 20, yPosition + 8);
            
            yPosition += 20;
            
            // –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            const tableData = bookings.map((booking, index) => [
                index + 1,
                convertToLatin(booking.fullName),
                booking.contact,
                convertToLatin(booking.hotel),
                `${booking.participants} ppl`,
                getPaymentStatusTextEn(booking.payment),
                convertToLatin(booking.notes || '‚Äî')
            ]);
            
            doc.autoTable({
                startY: yPosition,
                head: [['#', 'Full Name', 'Contact', 'Hotel', 'People', 'Payment', 'Notes']],
                body: tableData,
                styles: {
                    fontSize: 9,
                    cellPadding: 3,
                    font: 'helvetica'
                },
                headStyles: {
                    fillColor: [37, 99, 235],
                    textColor: 255,
                    fontSize: 10,
                    fontStyle: 'bold'
                },
                alternateRowStyles: {
                    fillColor: [248, 250, 252]
                },
                margin: { left: 20, right: 20 }
            });
            
            yPosition = doc.lastAutoTable.finalY + 20;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (yPosition > 250) {
                doc.addPage();
                yPosition = 20;
            }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        const fileName = `tolik_tours_bookings_${new Date().toISOString().split('T')[0]}.pdf`;
        doc.save(fileName);
        
        window.TolikCRM.database.showSuccess('PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF:', error);
        window.TolikCRM.database.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// ========================
// Excel Export
// ========================

function exportToExcel() {
    const filteredBookings = window.TolikCRM.database.getFilteredBookings();
    
    if (filteredBookings.length === 0) {
        window.TolikCRM.database.showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.');
        return;
    }
    
    try {
        const formatDate = window.TolikCRM.database.formatDate;
        const getPaymentStatusText = window.TolikCRM.database.getPaymentStatusText;
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        const excelData = filteredBookings.map((booking, index) => ({
            '‚Ññ': index + 1,
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': formatDate(booking.createdAt),
            '–§–ò–û': booking.fullName,
            '–ö–æ–Ω—Ç–∞–∫—Ç': booking.contact,
            '–û—Ç–µ–ª—å': booking.hotel,
            '–≠–∫—Å–∫—É—Ä—Å–∏—è': booking.excursionName,
            '–î–∞—Ç–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏': formatDate(new Date(booking.date)),
            '–í—Ä–µ–º—è': booking.excursionTime,
            '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤': booking.participants,
            '–û–ø–ª–∞—Ç–∞': getPaymentStatusText(booking.payment),
            '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è': booking.notes || ''
        }));
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        const wb = XLSX.utils.book_new();
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
        const ws = XLSX.utils.json_to_sheet(excelData);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        const colWidths = [
            { wch: 5 },   // ‚Ññ
            { wch: 12 },  // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            { wch: 25 },  // –§–ò–û
            { wch: 20 },  // –ö–æ–Ω—Ç–∞–∫—Ç
            { wch: 25 },  // –û—Ç–µ–ª—å
            { wch: 30 },  // –≠–∫—Å–∫—É—Ä—Å–∏—è
            { wch: 15 },  // –î–∞—Ç–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏
            { wch: 8 },   // –í—Ä–µ–º—è
            { wch: 10 },  // –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            { wch: 12 },  // –û–ø–ª–∞—Ç–∞
            { wch: 30 }   // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        ];
        ws['!cols'] = colWidths;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç –≤ –∫–Ω–∏–≥—É
        XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—è–≤–∫–∏');
        
        // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        const statsData = createStatsData(filteredBookings);
        const statsWs = XLSX.utils.json_to_sheet(statsData);
        statsWs['!cols'] = [{ wch: 30 }, { wch: 15 }, { wch: 15 }];
        XLSX.utils.book_append_sheet(wb, statsWs, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        const fileName = `Tolik_Tours_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(wb, fileName);
        
        window.TolikCRM.database.showSuccess(`Excel —Ñ–∞–π–ª "${fileName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel:', error);
        window.TolikCRM.database.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// ========================
// Helper Functions
// ========================

function groupBookingsByExcursionAndDate(bookings) {
    return bookings.reduce((groups, booking) => {
        const key = `${booking.excursionName}|${booking.date}`;
        if (!groups[key]) {
            groups[key] = [];
        }
        groups[key].push(booking);
        return groups;
    }, {});
}

function convertToLatin(text) {
    if (!text || typeof text !== 'string') return '';
    
    const cyrillic = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø';
    const latin = 'abvgdeeyzhzijklmnoprstufhzcchshshchhyeyuaaabvgdeeyzhzijklmnoprstufhzcchshshchhyeyua';
    
    let result = '';
    for (let i = 0; i < text.length; i++) {
        const char = text[i];
        const index = cyrillic.indexOf(char);
        result += index !== -1 ? latin[index] : char;
    }
    
    return result;
}

function formatDateForPDF(date) {
    return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
}

function getPaymentStatusTextEn(status) {
    const statusMap = {
        'pending': 'Pending',
        'partial': 'Partial', 
        'paid': 'Paid'
    };
    return statusMap[status] || 'Pending';
}

function createStatsData(bookings) {
    const stats = [];
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats.push({
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': bookings.length,
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': ''
    });
    
    stats.push({
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': bookings.reduce((sum, b) => sum + b.participants, 0),
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': '—á–µ–ª–æ–≤–µ–∫'
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–∫—Å–∫—É—Ä—Å–∏—è–º
    const excursionStats = {};
    bookings.forEach(booking => {
        if (!excursionStats[booking.excursionName]) {
            excursionStats[booking.excursionName] = { bookings: 0, participants: 0 };
        }
        excursionStats[booking.excursionName].bookings++;
        excursionStats[booking.excursionName].participants += booking.participants;
    });
    
    stats.push({
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': '',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': ''
    });
    
    stats.push({
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü–û –≠–ö–°–ö–£–†–°–ò–Ø–ú:',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': '',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': ''
    });
    
    Object.entries(excursionStats).forEach(([excursion, data]) => {
        stats.push({
            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': excursion,
            '–ó–Ω–∞—á–µ–Ω–∏–µ': data.participants,
            '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': `${data.bookings} –∑–∞—è–≤–æ–∫`
        });
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–∞–º
    const paymentStats = {
        'paid': 0,
        'partial': 0,
        'pending': 0
    };
    
    bookings.forEach(booking => {
        paymentStats[booking.payment]++;
    });
    
    stats.push({
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': '',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': ''
    });
    
    stats.push({
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ü–û –û–ü–õ–ê–¢–ê–ú:',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': '',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': ''
    });
    
    stats.push({
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–û–ø–ª–∞—á–µ–Ω–æ',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': paymentStats.paid,
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': '–∑–∞—è–≤–æ–∫'
    });
    
    stats.push({
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': paymentStats.partial,
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': '–∑–∞—è–≤–æ–∫'
    });
    
    stats.push({
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': paymentStats.pending,
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ': '–∑–∞—è–≤–æ–∫'
    });
    
    return stats;
}

// ========================
// Export to global namespace
// ========================

window.TolikCRM = window.TolikCRM || {};
window.TolikCRM.exports = {
    exportToPDF,
    exportToExcel
};