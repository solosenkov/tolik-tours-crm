// ========================
// üó∫Ô∏è Tours Management Module
// ========================

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–∞—Ö
let allTours = [];

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–∞ tours_list.txt
const INITIAL_TOURS_DATA = [
    {
        id: 'dalat',
        name: '–î–∞–ª–∞—Ç –ò–ù–°–¢–ê–ì–†–ê–ú',
        price: 55,
        groupSize: '10-13 —á–µ–ª',
        departureTime: '5:00-5:30',
        returnTime: '19:00',
        duration: '14 —á–∞—Å–æ–≤',
        description: '–ì–æ—Ä–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –≤ –î–∞–ª–∞—Ç —Å –ø–æ—Å–µ—â–µ–Ω–∏–µ–º –ø–∞—Ä–∫–∞ –ª—é–±–≤–∏, —Å—Ç–µ–∫–ª—è–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞, –º—É–∑–µ—è –≤–æ—Å–∫–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä, –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ö—Ä–∞–º–∞ –∏ —Ñ–µ—Ä–º—ã –∫–æ—Ñ–µ –õ—é–≤–∞–∫.',
        features: ['–ó–∞–≤—Ç—Ä–∞–∫ –≤ –∫–æ—Ä–æ–±–æ—á–∫–µ', '–û–±–µ–¥ –≤–∫–ª—é—á–µ–Ω', '–ì–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–∞–ª', '–ü–∞—Ä–∫ –ª—é–±–≤–∏', '–°—Ç–µ–∫–ª—è–Ω–Ω—ã–π –º–æ—Å—Ç', '–ö—Ä–µ–π–∑–∏ –•–∞—É—Å', '–§–µ—Ä–º–∞ –õ—é–≤–∞–∫'],
        included: '–ì–æ–≤—è–¥–∏–Ω–∞, –∫—É—Ä–∏—Ü–∞, —Å—É–ø—ã, —Å–∞–ª–∞—Ç—ã, —Ä–æ–º –∏ –∫–æ–ª–∞',
        notes: '–í–∑—è—Ç—å –∫–æ—Ñ—Ç–æ—á–∫—É (—Ö–æ–ª–æ–¥–Ω–µ–µ —á–µ–º –≤ –ù—è—á–∞–Ω–≥–µ), —Ç–∞–±–ª–µ—Ç–∫–∏ –æ—Ç —É–∫–∞—á–∏–≤–∞–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–æ–ª–µ–Ω–∏ –∏ –ø–ª–µ—á–∏ –¥–ª—è —Ö—Ä–∞–º–æ–≤',
        isActive: true
    },
    {
        id: 'northern-islands',
        name: '–û—Å—Ç—Ä–æ–≤ –æ–±–µ–∑—å—è–Ω –∏ –°–µ–≤–µ—Ä–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞',
        price: 35,
        groupSize: '10+ —á–µ–ª',
        departureTime: '7:00-7:30',
        returnTime: '16:00',
        duration: '9 —á–∞—Å–æ–≤',
        description: '–ü–æ—Å–µ—â–µ–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ –û—Ä—Ö–∏–¥–µ–π —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º –∏ –≤–æ–¥–æ–ø–∞–¥–∞–º–∏, –∑–∞—Ç–µ–º –æ—Å—Ç—Ä–æ–≤ –æ–±–µ–∑—å—è–Ω —Å —à–æ—É –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–µ–∑—å—è–Ω.',
        features: ['–û—Å—Ç—Ä–æ–≤ –û—Ä—Ö–∏–¥–µ–π', '–ó–æ–æ–ø–∞—Ä–∫', '–í–æ–¥–æ–ø–∞–¥—ã', '–°–∞–¥ –±–∞–±–æ—á–µ–∫', '–û—Å—Ç—Ä–æ–≤ –æ–±–µ–∑—å—è–Ω', '–®–æ—É –æ–±–µ–∑—å—è–Ω'],
        included: '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã, –∫—É—Ä–∏–Ω—ã–π —à–∞—à–ª—ã–∫, —Ñ—Ä—É–∫—Ç—ã, –≤—å–µ—Ç–Ω–∞–º—Å–∫–∏–π —Å–∞–º–æ–≥–æ–Ω, —Ä–æ–º',
        notes: '–ö—É–ø–∞–ª—å–Ω–∏–∫, –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä, –∫—Ä–µ–º –æ—Ç –∑–∞–≥–∞—Ä–∞',
        isActive: true
    },
    {
        id: 'southern-islands',
        name: '–Æ–∂–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞ + —Ä—ã–±–∞–ª–∫–∞ + —Å–Ω–æ—Ä–∫–ª–∏–Ω–≥',
        price: 38,
        groupSize: '10+ —á–µ–ª',
        departureTime: '7:00-7:30',
        returnTime: '16:00',
        duration: '9 —á–∞—Å–æ–≤',
        description: '–°–Ω–æ—Ä–∫–ª–∏–Ω–≥ –Ω–∞ –∫–æ—Ä–∞–ª–ª–æ–≤–æ–º –±–∞—Ä—å–µ—Ä–µ, —Ä—ã–±–∞–ª–∫–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–æ—Ä–µ, –æ—Ç–¥—ã—Ö –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –•–æ–Ω –¢–∞–º —Å –±–µ–ª–æ—Å–Ω–µ–∂–Ω—ã–º –ø–µ—Å–∫–æ–º.',
        features: ['–°–Ω–æ—Ä–∫–ª–∏–Ω–≥', '–†—ã–±–∞–ª–∫–∞', '–ö–æ—Ä–∞–ª–ª–æ–≤—ã–π —Ä–∏—Ñ', '–û—Å—Ç—Ä–æ–≤ –•–æ–Ω –¢–∞–º', '–ë–∞—Å—Å–µ–π–Ω—ã', '–õ–µ–∂–∞–∫–∏'],
        included: '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã, –∫—É—Ä–∏–Ω—ã–π —à–∞—à–ª—ã–∫, —Ñ—Ä—É–∫—Ç—ã, –≤—å–µ—Ç–Ω–∞–º—Å–∫–∏–π —Å–∞–º–æ–≥–æ–Ω, —Ä–æ–º',
        notes: '–ö—É–ø–∞–ª—å–Ω–∏–∫, –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä, –∫—Ä–µ–º –æ—Ç –∑–∞–≥–∞—Ä–∞',
        isActive: true
    },
    {
        id: 'phan-rang',
        name: '–ì–æ—Ä–æ–¥ –§–∞–Ω—Ä–∞–Ω–≥',
        price: 40,
        groupSize: '6-13 —á–µ–ª',
        departureTime: '6:30-7:00',
        returnTime: '19:00',
        duration: '12.5 —á–∞—Å–æ–≤',
        description: '–ì–æ—Ä–æ–¥-–∫—É—Ä–æ—Ä—Ç –Ω–∞ —é–≥–µ, —Ö—Ä–∞–º-–ª–∞–±–∏—Ä–∏–Ω—Ç –¥—Ä–∞–∫–æ–Ω–∞, –∫–æ—Ä–∞–ª–ª–æ–≤–∞—è –±–∞—à–Ω—è, –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω–∞—è –ø–ª–∞–Ω—Ç–∞—Ü–∏—è, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –∑–æ–æ–ø–∞—Ä–∫.',
        features: ['–•—Ä–∞–º –¥—Ä–∞–∫–æ–Ω–∞', '–ö–æ—Ä–∞–ª–ª–æ–≤–∞—è –±–∞—à–Ω—è', '–í–∏–Ω–æ–≥—Ä–∞–¥–Ω–∏–∫–∏', '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –∑–æ–æ–ø–∞—Ä–∫', '–ü–ª—è–∂ –¶–∞–ø–ª–µ–π'],
        included: '–û—Å–æ–±–µ–Ω–Ω—ã–π –ª–æ–±—Å—Ç–µ—Ä, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã, –∫—É—Ä–∏—Ü–∞, —Ñ—Ä—É–∫—Ç—ã, –≤—å–µ—Ç–Ω–∞–º—Å–∫–∏–π —Å–∞–º–æ–≥–æ–Ω, —Ä–æ–º',
        notes: '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ –≤–∏–∑—ã –¥–ª—è –º–æ—Ä—Å–∫–æ–π –ø–æ–ª–∏—Ü–∏–∏! –ö—É–ø–∞–ª—å–Ω–∏–∫, –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ',
        isActive: true
    },
    {
        id: 'yang-bay',
        name: '–≠–∫–æ –ø–∞—Ä–∫ –Ø–Ω–≥ –ë—ç–π',
        price: 35,
        groupSize: '10+ —á–µ–ª',
        departureTime: '7:00-7:30',
        returnTime: '16:00',
        duration: '9 —á–∞—Å–æ–≤',
        description: '–≠–∫–æ –ø–∞—Ä–∫ —Å—Ä–µ–¥–∏ –¥–∂—É–Ω–≥–ª–µ–π —Å —Ç–µ—Ä–º–∞–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, –≤–æ–¥–æ–ø–∞–¥–æ–º, –¥–µ—Ä–µ–≤–Ω–µ–π –ø–ª–µ–º–µ–Ω–∏ –†–∞–≥–ª–∞–π –∏ –∫—Ä–æ–∫–æ–¥–∏–ª–æ–≤–æ–π —Ñ–µ—Ä–º–æ–π.',
        features: ['–ü–ª–µ–º—è –†–∞–≥–ª–∞–π', '–¢–µ—Ä–º–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏', '–í–æ–¥–æ–ø–∞–¥ –Ø–Ω–≥ –ë–µ–π', '–ö—Ä–æ–∫–æ–¥–∏–ª–æ–≤–∞—è —Ñ–µ—Ä–º–∞', '–ü–æ—Ä–æ—Å—è—á—å–∏ –±–µ–≥–∞'],
        included: '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã, –∫—É—Ä–∏—Ü–∞, —Ñ—Ä—É–∫—Ç—ã, –≤—å–µ—Ç–Ω–∞–º—Å–∫–∏–π —Å–∞–º–æ–≥–æ–Ω, —Ä–æ–º',
        notes: '–ö—É–ø–∞–ª—å–Ω–∏–∫, –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä, –∫—Ä–µ–º –æ—Ç –∑–∞–≥–∞—Ä–∞',
        isActive: true
    },
    {
        id: 'nha-trang-city',
        name: '–ì–æ—Ä–æ–¥—Å–∫–æ–π —Ç—É—Ä –ø–æ –ù—è—á–∞–Ω–≥—É',
        price: 25,
        groupSize: '10+ —á–µ–ª',
        departureTime: '7:00-7:30',
        returnTime: '15:00',
        duration: '8 —á–∞—Å–æ–≤',
        description: '–û–±–∑–æ—Ä–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –ù—è—á–∞–Ω–≥—É: —Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è, –±–∞—à–Ω—è –ü–æ –ù–∞–≥–∞—Ä, –ø–∞–≥–æ–¥–∞ –õ–æ–Ω–≥ –®–æ–Ω, –∫–∞–º–µ–Ω–Ω—ã–π —Å–æ–±–æ—Ä.',
        features: ['–î–µ—Ä–µ–≤–Ω—è –¢—Ä—É–æ–Ω–≥ –°–æ–Ω', '–ë–∞—à–Ω—è –ü–æ –ù–∞–≥–∞—Ä', '–ë–µ–ª—ã–π –ë—É–¥–¥–∞', '–ö–∞–º–µ–Ω–Ω—ã–π —Å–æ–±–æ—Ä'],
        included: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–µ –±–ª—é–¥–æ –§–æ –ë–æ (–≥–æ–≤—è–∂–∏–π —Å—É–ø)',
        notes: '–õ–µ–≥–∫–∞—è –ø—Ä–æ–≥—É–ª–æ—á–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è',
        isActive: true
    },
    {
        id: 'doc-let',
        name: '–î–æ–∫ –õ–µ—Ç',
        price: 30,
        groupSize: '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è',
        departureTime: '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è',
        returnTime: '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è',
        duration: '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è',
        description: '–ü–ª—è–∂–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –≤ –î–æ–∫ –õ–µ—Ç. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è.',
        features: ['–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö'],
        included: '–û–±–µ–¥ –≤–∫–ª—é—á–µ–Ω',
        notes: '–ö—É–ø–∞–ª—å–Ω–∏–∫, –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ',
        isActive: true
    }
];

// ========================
// Database Operations
// ========================

async function initializeToursData() {
    console.log('Initializing tours data...');
    
    const db = window.TolikCRM.db;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ tours
        const snapshot = await db.collection('tours').get();
        
        if (snapshot.empty) {
            console.log('No tours found, creating initial data...');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for (const tour of INITIAL_TOURS_DATA) {
                await db.collection('tours').doc(tour.id).set({
                    ...tour,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                });
            }
            
            console.log('Initial tours data created successfully');
        } else {
            console.log('Tours data already exists');
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        setupToursListener();
        
    } catch (error) {
        console.error('Error initializing tours data:', error);
        window.TolikCRM.database.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö');
    }
}

function setupToursListener() {
    const db = window.TolikCRM.db;
    
    db.collection('tours')
        .orderBy('name')
        .onSnapshot((querySnapshot) => {
            allTours = [];
            
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                allTours.push({
                    id: doc.id,
                    ...data,
                    createdAt: data.createdAt?.toDate() || new Date(),
                    updatedAt: data.updatedAt?.toDate() || new Date()
                });
            });
            
            console.log('Tours data updated:', allTours.length, 'tours');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π –∞–∫—Ç–∏–≤–Ω–∞
            if (document.getElementById('toursPage').classList.contains('active')) {
                renderToursGrid();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã —ç–∫—Å–∫—É—Ä—Å–∏–π –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
            updateExcursionSelects();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (window.TolikCRM.ui && window.TolikCRM.ui.refreshDashboard) {
                window.TolikCRM.ui.refreshDashboard();
            }
            
        }, (error) => {
            console.error('Error getting tours:', error);
            window.TolikCRM.database.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö');
        });
}

async function updateTourPrice(tourId, newPrice) {
    const db = window.TolikCRM.db;
    
    try {
        await db.collection('tours').doc(tourId).update({
            price: newPrice,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (window.TolikCRM.ui && window.TolikCRM.ui.refreshDashboard) {
            window.TolikCRM.ui.refreshDashboard();
        }
        
        window.TolikCRM.database.showSuccess('–¶–µ–Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        
    } catch (error) {
        console.error('Error updating tour price:', error);
        window.TolikCRM.database.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
}

async function toggleTourStatus(tourId) {
    const tour = allTours.find(t => t.id === tourId);
    if (!tour) return;
    
    const db = window.TolikCRM.db;
    
    try {
        await db.collection('tours').doc(tourId).update({
            isActive: !tour.isActive,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (window.TolikCRM.ui && window.TolikCRM.ui.refreshDashboard) {
            window.TolikCRM.ui.refreshDashboard();
        }
        
        const status = !tour.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞';
        window.TolikCRM.database.showSuccess(`–≠–∫—Å–∫—É—Ä—Å–∏—è ${status}`);
        
    } catch (error) {
        console.error('Error toggling tour status:', error);
        window.TolikCRM.database.showError('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏');
    }
}

// ========================
// UI Functions
// ========================

function initToursPage() {
    console.log('Initializing tours page');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (allTours.length === 0) {
        initializeToursData();
    } else {
        renderToursGrid();
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupToursEventListeners();
}

function renderToursGrid() {
    const toursGrid = document.getElementById('toursGrid');
    const noToursDiv = document.getElementById('noToursData');
    
    if (!toursGrid) return;
    
    if (allTours.length === 0) {
        toursGrid.innerHTML = '';
        if (noToursDiv) noToursDiv.style.display = 'block';
        return;
    }
    
    if (noToursDiv) noToursDiv.style.display = 'none';
    
    toursGrid.innerHTML = allTours.map(tour => `
        <div class="tour-card ${tour.isActive ? '' : 'inactive'}" data-tour-id="${tour.id}">
            <div class="tour-status ${tour.isActive ? 'active' : 'inactive'}">
                ${tour.isActive ? '–ê–ö–¢–ò–í–ù–ê' : '–ù–ï–ê–ö–¢–ò–í–ù–ê'}
            </div>
            
            <div class="tour-card-header">
                <h3 class="tour-title">${tour.name}</h3>
                <div class="tour-price" data-price="${tour.price}">$${tour.price}</div>
            </div>
            
            <div class="tour-schedule">
                <div class="tour-schedule-item">
                    <i class="fas fa-clock"></i>
                    <span>–í—ã–µ–∑–¥: ${tour.departureTime} ‚Üí –í–æ–∑–≤—Ä–∞—Ç: ${tour.returnTime}</span>
                </div>
                <div class="tour-schedule-item">
                    <i class="fas fa-users"></i>
                    <span>–ì—Ä—É–ø–ø–∞: ${tour.groupSize}</span>
                </div>
                <div class="tour-schedule-item">
                    <i class="fas fa-hourglass-half"></i>
                    <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${tour.duration}</span>
                </div>
            </div>
            
            <div class="tour-description">${tour.description}</div>
            
            <div class="tour-features">
                ${tour.features.slice(0, 4).map(feature => `
                    <span class="tour-feature">${feature}</span>
                `).join('')}
                ${tour.features.length > 4 ? `<span class="tour-feature">+${tour.features.length - 4} –µ—â–µ</span>` : ''}
            </div>
            
            <div class="tour-card-actions">
                <button class="tour-action-btn edit-tour-btn" onclick="editTourPrice('${tour.id}')">
                    <i class="fas fa-dollar-sign"></i>
                    –¶–µ–Ω–∞
                </button>
                <button class="tour-action-btn edit-tour-btn" onclick="editTour('${tour.id}')">
                    <i class="fas fa-edit"></i>
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button class="tour-action-btn toggle-tour-btn" onclick="toggleTour('${tour.id}')">
                    <i class="fas fa-power-off"></i>
                    ${tour.isActive ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'}
                </button>
            </div>
        </div>
    `).join('');
}

function setupToursEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏
    const addTourBtn = document.getElementById('addNewTour');
    if (addTourBtn) {
        addTourBtn.addEventListener('click', () => {
            // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–∫—É—Ä—Å–∏–∏
            console.log('Add new tour clicked');
            alert('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportBtn = document.getElementById('exportToursList');
    if (exportBtn) {
        exportBtn.addEventListener('click', () => {
            exportToursToExcel();
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    const bulkUpdateBtn = document.getElementById('bulkPriceUpdate');
    if (bulkUpdateBtn) {
        bulkUpdateBtn.addEventListener('click', () => {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω
            console.log('Bulk price update clicked');
            alert('–§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
        });
    }
}

// ========================
// Helper Functions
// ========================

function updateExcursionSelects() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã —ç–∫—Å–∫—É—Ä—Å–∏–π –≤ —Ñ–æ—Ä–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    const excursionSelect = document.getElementById('excursion');
    if (excursionSelect) {
        const currentValue = excursionSelect.value;
        excursionSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–∫—É—Ä—Å–∏—é</option>';
        
        allTours
            .filter(tour => tour.isActive)
            .forEach(tour => {
                const option = document.createElement('option');
                option.value = tour.name;
                option.textContent = `${tour.name} ($${tour.price})`;
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                option.dataset.time = `${tour.departureTime} - ${tour.returnTime}`;
                excursionSelect.appendChild(option);
            });
            
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
        if (currentValue) excursionSelect.value = currentValue;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    const filterSelect = document.getElementById('filterExcursion');
    if (filterSelect) {
        const currentValue = filterSelect.value;
        filterSelect.innerHTML = '<option value="">–í—Å–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏</option>';
        
        allTours
            .filter(tour => tour.isActive)
            .forEach(tour => {
                const option = document.createElement('option');
                option.value = tour.name;
                option.textContent = tour.name;
                filterSelect.appendChild(option);
            });
            
        if (currentValue) filterSelect.value = currentValue;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    const financeFilterSelect = document.getElementById('financeFilterExcursion');
    if (financeFilterSelect) {
        const currentValue = financeFilterSelect.value;
        financeFilterSelect.innerHTML = '<option value="">–í—Å–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏</option>';
        
        allTours
            .filter(tour => tour.isActive)
            .forEach(tour => {
                const option = document.createElement('option');
                option.value = tour.name;
                option.textContent = tour.name;
                financeFilterSelect.appendChild(option);
            });
            
        if (currentValue) financeFilterSelect.value = currentValue;
    }
}

function getTourByName(name) {
    return allTours.find(tour => tour.name === name);
}

function getTourPrice(name) {
    const tour = getTourByName(name);
    return tour ? tour.price : 0;
}

function exportToursToExcel() {
    // –°–æ–∑–¥–∞–µ–º workbook
    const wb = XLSX.utils.book_new();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const toursData = [
        ['–°–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π Tolik Tours'],
        ['–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:', new Date().toLocaleDateString('ru-RU')],
        [''],
        ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞ ($)', '–ì—Ä—É–ø–ø–∞', '–í—ã–µ–∑–¥', '–í–æ–∑–≤—Ä–∞—Ç', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å', '–û–ø–∏—Å–∞–Ω–∏–µ']
    ];
    
    allTours.forEach(tour => {
        toursData.push([
            tour.name,
            tour.price,
            tour.groupSize,
            tour.departureTime,
            tour.returnTime,
            tour.duration,
            tour.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞',
            tour.description
        ]);
    });
    
    const ws = XLSX.utils.aoa_to_sheet(toursData);
    XLSX.utils.book_append_sheet(wb, ws, '–≠–∫—Å–∫—É—Ä—Å–∏–∏');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const today = new Date().toISOString().split('T')[0];
    const filename = `tours_list_${today}.xlsx`;
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    XLSX.writeFile(wb, filename);
}

// ========================
// Global Functions (for HTML onclick)
// ========================

function editTourPrice(tourId) {
    const tour = allTours.find(t => t.id === tourId);
    if (!tour) return;
    
    const newPrice = prompt(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è "${tour.name}":`, tour.price);
    if (newPrice && !isNaN(newPrice) && parseFloat(newPrice) > 0) {
        updateTourPrice(tourId, parseFloat(newPrice));
    }
}

function editTour(tourId) {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–∫—É—Ä—Å–∏–∏
    console.log('Edit tour:', tourId);
    alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–∫—É—Ä—Å–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
}

function toggleTour(tourId) {
    toggleTourStatus(tourId);
}

// ========================
// Export to global namespace
// ========================

window.TolikCRM = window.TolikCRM || {};
window.TolikCRM.tours = {
    initToursPage,
    initializeToursData,
    renderToursGrid,
    updateTourPrice,
    toggleTourStatus,
    getTourByName,
    getTourPrice,
    exportToursToExcel,
    updateExcursionSelects,
    getAllTours: () => allTours
};

// Make functions globally available for HTML onclick
window.editTourPrice = editTourPrice;
window.editTour = editTour;
window.toggleTour = toggleTour;