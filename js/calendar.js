// ========================
// üìÖ Calendar & Schedule Logic
// ========================

const EXCURSIONS_SCHEDULE = {
    'monday': [
        { id: 'south-islands-mon', name: '–Æ–∂–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞', time: '08:00' }
    ],
    'tuesday': [
        { id: 'dalat-tue', name: '–î–∞–ª–∞—Ç', time: '06:00' },
        { id: 'north-islands-tue', name: '–°–µ–≤–µ—Ä–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞', time: '08:30' }
    ],
    'wednesday': [
        { id: 'city-tour-wed', name: '–ì–æ—Ä–æ–¥—Å–∫–æ–π —Ç—É—Ä –ù—è—á–∞–Ω–≥', time: '09:00' },
        { id: 'doc-let-wed', name: '–î–æ–∫ –õ–µ—Ç', time: '08:00' }
    ],
    'thursday': [
        { id: 'dalat-thu', name: '–î–∞–ª–∞—Ç', time: '06:00' },
        { id: 'south-islands-thu', name: '–Æ–∂–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞', time: '08:00' }
    ],
    'friday': [
        { id: 'north-islands-fri', name: '–°–µ–≤–µ—Ä–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞', time: '08:30' }
    ],
    'saturday': [
        { id: 'dalat-sat', name: '–î–∞–ª–∞—Ç', time: '06:00' },
        { id: 'south-islands-sat', name: '–Æ–∂–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞', time: '08:00' }
    ],
    'sunday': [
        { id: 'yang-bay-sun', name: '–Ø–Ω–≥ –ë–∞–π', time: '08:00' },
        { id: 'phan-rang-sun', name: '–§–∞–Ω –†–∞–Ω–≥', time: '07:00' }
    ]
};

// ========================
// Day Name Utilities
// ========================

function getDayName(day) {
    const days = {
        'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
        'wednesday': '–°—Ä–µ–¥–∞',
        'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'saturday': '–°—É–±–±–æ—Ç–∞',
        'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    };
    return days[day] || day;
}

function getDayNameFromDate(date) {
    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    return days[date.getDay()];
}

// ========================
// Calendar Restrictions
// ========================

function getAvailableDaysForExcursion(excursionName) {
    const availableDays = [];
    
    Object.entries(EXCURSIONS_SCHEDULE).forEach(([day, excursions]) => {
        excursions.forEach(excursion => {
            if (excursion.name === excursionName) {
                availableDays.push(day);
            }
        });
    });
    
    return availableDays;
}

function setupCalendarRestrictions(dateInput, availableDays) {
    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –±—ã–ª
    const oldHandler = dateInput._restrictionHandler;
    if (oldHandler) {
        dateInput.removeEventListener('input', oldHandler);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è)
    const today = new Date().toISOString().split('T')[0];
    dateInput.setAttribute('min', today);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    const restrictionHandler = function(event) {
        const selectedDate = new Date(event.target.value);
        const dayName = getDayNameFromDate(selectedDate);
        
        if (!availableDays.includes(dayName)) {
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –Ω–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
            const nextDate = getNextAvailableDateFromDate(selectedDate, availableDays);
            if (nextDate) {
                event.target.value = nextDate;
                showError(`–≠—Ç–∞ —ç–∫—Å–∫—É—Ä—Å–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ ${getReadableDayNames(availableDays)}. –í—ã–±—Ä–∞–Ω–∞ –±–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –¥–∞—Ç–∞.`);
            }
        }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    dateInput._restrictionHandler = restrictionHandler;
    dateInput.addEventListener('input', restrictionHandler);
}

function clearCalendarRestrictions(dateInput) {
    const oldHandler = dateInput._restrictionHandler;
    if (oldHandler) {
        dateInput.removeEventListener('input', oldHandler);
        dateInput._restrictionHandler = null;
    }
    dateInput.removeAttribute('min');
}

// ========================
// Date Calculation
// ========================

function getNextAvailableDate(availableDays, fromDate = new Date()) {
    const dayIndices = {
        'monday': 1, 'tuesday': 2, 'wednesday': 3, 'thursday': 4,
        'friday': 5, 'saturday': 6, 'sunday': 0
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π
    const availableIndices = availableDays.map(day => dayIndices[day]);
    
    let checkDate = new Date(fromDate);
    
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 14 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥)
    for (let i = 0; i < 14; i++) {
        const dayIndex = checkDate.getDay();
        
        if (availableIndices.includes(dayIndex)) {
            return checkDate.toISOString().split('T')[0];
        }
        
        checkDate.setDate(checkDate.getDate() + 1);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ–≥–æ–¥–Ω—è + 1 –¥–µ–Ω—å
    return new Date(Date.now() + 86400000).toISOString().split('T')[0];
}

function getNextAvailableDateFromDate(fromDate, availableDays) {
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 30 –¥–Ω–µ–π –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    for (let i = 0; i < 30; i++) {
        const testDate = new Date(fromDate);
        testDate.setDate(fromDate.getDate() + i);
        
        const dayName = getDayNameFromDate(testDate);
        if (availableDays.includes(dayName)) {
            return testDate.toISOString().split('T')[0];
        }
    }
    
    return null;
}

function getReadableDayNames(dayKeys) {
    const dayNames = {
        'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∏',
        'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫–∏', 
        'wednesday': '—Å—Ä–µ–¥—ã',
        'thursday': '—á–µ—Ç–≤–µ—Ä–≥–∏',
        'friday': '–ø—è—Ç–Ω–∏—Ü—ã',
        'saturday': '—Å—É–±–±–æ—Ç—ã',
        'sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è'
    };
    
    return dayKeys.map(key => dayNames[key]).join(', ');
}

// ========================
// Populate Selects
// ========================

function populateExcursionSelects() {
    const excursionSelect = document.getElementById('excursion');
    const filterExcursionSelect = document.getElementById('filterExcursion');
    
    // –û—á–∏—â–∞–µ–º —Å–µ–ª–µ–∫—Ç—ã
    excursionSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–∫—É—Ä—Å–∏—é</option>';
    filterExcursionSelect.innerHTML = '<option value="">–í—Å–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏</option>';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç—ã —ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏ –ë–ï–ó –≤—Ä–µ–º–µ–Ω–∏
    Object.entries(EXCURSIONS_SCHEDULE).forEach(([day, excursions]) => {
        excursions.forEach(excursion => {
            const dayName = getDayName(day);
            const optionText = `${excursion.name} (${dayName})`;
            
            // –î–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            const option1 = document.createElement('option');
            option1.value = excursion.id;
            option1.textContent = optionText;
            option1.dataset.day = day;
            option1.dataset.name = excursion.name;
            option1.dataset.time = excursion.time;
            excursionSelect.appendChild(option1);
            
            // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
            const option2 = document.createElement('option');
            option2.value = excursion.id;
            option2.textContent = optionText;
            filterExcursionSelect.appendChild(option2);
        });
    });
}

// ========================
// Date Hints
// ========================

function showDateHint(excursionName, availableDays) {
    let hintElement = document.getElementById('dateHint');
    if (!hintElement) {
        hintElement = document.createElement('div');
        hintElement.id = 'dateHint';
        hintElement.className = 'date-hint';
        
        const dateInput = document.getElementById('date');
        dateInput.parentNode.insertBefore(hintElement, dateInput.nextSibling);
    }
    
    const dayNames = getReadableDayNames(availableDays);
    hintElement.innerHTML = `<i class="fas fa-info-circle"></i> –≠–∫—Å–∫—É—Ä—Å–∏—è "${excursionName}" –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤: ${dayNames}`;
    hintElement.style.display = 'block';
}

function hideDateHint() {
    const hintElement = document.getElementById('dateHint');
    if (hintElement) {
        hintElement.style.display = 'none';
    }
}

// ========================
// Export to global namespace
// ========================

window.TolikCRM = window.TolikCRM || {};
window.TolikCRM.calendar = {
    EXCURSIONS_SCHEDULE,
    getDayName,
    getDayNameFromDate,
    getAvailableDaysForExcursion,
    setupCalendarRestrictions,
    clearCalendarRestrictions,
    getNextAvailableDate,
    getNextAvailableDateFromDate,
    getReadableDayNames,
    populateExcursionSelects,
    showDateHint,
    hideDateHint
};